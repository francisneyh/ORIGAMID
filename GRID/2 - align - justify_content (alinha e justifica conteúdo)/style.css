body {
    font-family: Arial, Helvetica, sans-serif;
}

h1 {
    text-align: center;
}

h2 {
    margin-top: 0;
}

.comprar {
    background: #a8f;
    color: #103;
    padding: 10px 20px;
    text-decoration: none;
    border-radius: 4px;
    display: grid; /* faz o elemento ser grid e não ser mais inline, ou seja não precisa usar o display: inline block para fazer o elemento ser inline-block */
}

.item {
    background: #f7f7f7;
    border: 1px solid #e7e7e7;
    border-radius: 4px;
    padding: 20px;
    display: grid; /* faz o elemento ser grid e não ser mais inline, ou precisar usar o display: inline block para fazer o elemento ser inline-block */
}

.grid {
    display: grid;
    height: 800px;
    grid-template-columns: auto auto; /* faz colunas no grid, recomendavel usar o fr (unidade fraccionaria que distribui o espaço que sobra entre os elementos, cada fr é uma coluna) por ser valor mais exato e dividir em pedaços iguais não quebra o layout diferente da porcentagem, e diferente do px que por sua vez coloca um tamanho fixo na coluna */
    gap: 20px; /* separa margens no grid, logo não precisa usar o margin para adicionar margem no grid */
    /* align-content: space-evenly; /* alinha na horizontal os elementos do grid */ 
    /* justify-content: space-evenly; /* justifica/alinha na vertical os elementos do grid */ 
    place-content: start; /* Atalho para as propriedades align-content e para o justify-content, logo faz a mesma coisa que os dois. Se colocar só um valor aplica para ambos, pode colocar um valor distinto para cada */
}

/* align-content é alinhamento na vertical (start, center, end, stretch, space-between, space-around, space-evenly). Precisa ter espaço sobrando para fazer o alinhamento, não funciona bem com o fr, funciona melhor com px ou auto (o auto define que a largura do conteúdo vai ser automática ou seja a largura vai ser automática de acordo com o tamanho do conteúdo do grid, logo a coluna do conteúdo aumenta ou diminui) */
/* justify-content é alinhamento na horizontal (start, center, end, stretch, space-between, space-around, space-evenly) Precisa ter espaço sobrando para fazer o alinhamento, não funciona bem com o fr, funciona melhor com px ou auto (o auto define que a largura do conteúdo vai ser automática ou seja a largura vai ser automática de acordo com o tamanho do conteúdo do grid, logo a coluna do conteúdo aumenta ou diminui) */
/* fr força a distribuição do espaço em branco (máximo), logo não funciona o justificar (justify-content) */


  
/* 
JUSTIFY-CONTENT (justica/alinha na vertical)

start = colunas do grid ficam do lado esquerdo da tela (ínicio)
end = colunas do grid ficam do lado direto da tela (final)
center = colunas do grid ficam no meio da tela
space-between = espaçamento entre as colunas do grid, de forma vertical
space-evenly = cria espaçamento mais iguais (bem distribuidos entre os elementos/colunas) entre os cantos e os meios das colunas do grid 
*/

/*
ALIGN-CONTENT (alinha na horizontal)
start = colunas do grid ficam no início da tela 
end = colunas do grid ficam no final da tela 
center = colunas do grid ficam no meio da tela  
space-around = espaçamento entre as colunas do grid, de forma horizontal
space-evenly = cria espaçamento mais iguais (bem distribuidos entre os elementos/colunas) entre os cantos e os meios das colunas do grid 
*/

/* OBS: TANTO PARA JUSTIFICAR QUANTO PARA ALINHAR O CONTEÚDO PRECISA TER ESPAÇO SOBRANDO, SENÃO NÃO CONSEGUE ALINHAR POIS NÃO TEM O QUE SOBRAR */

/* 
ORDEM =  align (1), justify (2)
place-content = é um atalho para o align e justify 
*/

